#For this project I downloaded Spotify data from Kaggle. Then, I created a table to insert the data into. Finally, I used SQL to analyze the data.

#First, I created the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then, I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL queries.

#1. Determine the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, AVG(danceability), AVG(popularity), AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#2. Determine who the Top 10 artists are by popularity.
SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#3. Provide the artist name and track name with the slowest tempo.
SELECT artist_name, track_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo ASC
LIMIT 1

#Then, I created a common table expression (CTE) and used it to perform different calculations.

WITH Popularity AS (
SELECT s.artist_name, AVG(s.popularity) AS average_popularity, AVG(s.loudness) AS average_loudness
FROM Spotifydata AS s
GROUP BY s.artist_name
)

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM Popularity
WHERE average_popularity >= 90
ORDER BY average_popularity;

SELECT artist_name, average_loudness
FROM Popularity
WHERE average_loudness < -5
ORDER BY average_loudness
LIMIT 5
